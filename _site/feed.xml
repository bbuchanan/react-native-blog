<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="/react-native-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/react-native-blog/" rel="alternate" type="text/html" /><updated>2018-05-22T15:47:57-04:00</updated><id>/react-native-blog/</id><title type="html">React Native Sports App Tutorial</title><subtitle>Building a small sports score React Native application from the ground up.</subtitle><entry><title type="html">React Native Nativebase</title><link href="/react-native-blog/react-native-nativebase.html" rel="alternate" type="text/html" title="React Native Nativebase" /><published>2018-05-22T00:00:00-04:00</published><updated>2018-05-22T00:00:00-04:00</updated><id>/react-native-blog/react-native-nativebase</id><content type="html" xml:base="/react-native-blog/react-native-nativebase.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-sports-stats-screen.html&quot;&gt;&amp;laquo; React Native Sports Stats Screen&lt;/a&gt;
   
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;nativebase---an-introduction&quot;&gt;NativeBase - An Introduction&lt;/h1&gt;

&lt;p&gt;I mentioned way back in the &lt;a href=&quot;2018-04-16-react-native-hello-world.md&quot;&gt;React Native Hello World article&lt;/a&gt; that we would be using a 3rd party library called NativeBase. I think most will agree that React Native’s UI component support is minimal and NativeBase is one of the better attempts at rounding out that offering. They provide a number of modern UI components to greatly improve the user experience.&lt;/p&gt;

&lt;p&gt;On top of a good offering, the documentation is also pretty good. The examples they provide get me by most of the time. Anything that isn’t too obvious can usually be resolved by looking at the source code, which is clean and discoverable. There is also a fairly active community here: &lt;a href=&quot;http://discuss.nativebase.io/&quot; target=&quot;_blank&quot;&gt;NativeBase Forum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was mentioned at the end of the last article, that the goal here is to pretty up our sports statistics screen.&lt;/p&gt;

&lt;p&gt;Here’s what we’re going for …&lt;/p&gt;

&lt;video width=&quot;640&quot; height=&quot;480&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/react-native-blog/assets/videos/react-native-stats.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;As you’re probably used to by now, lets get started by installing the NativeBase package.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add native-base&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are going to be a lot of changes. They’re all confined to the &lt;code class=&quot;highlighter-rouge&quot;&gt;StatsScreen.js&lt;/code&gt; file, but as usually, if you get lost, grab the file from my github page for this commit. I’ll link to it at the end of the article.&lt;/p&gt;

&lt;p&gt;Here we go …&lt;/p&gt;

&lt;p&gt;Our import from &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native&lt;/code&gt; is going to change a bit. Replace the current import with this import.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The big import is going to come from &lt;code class=&quot;highlighter-rouge&quot;&gt;native-base&lt;/code&gt;. Add these lines to your import.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;DeckSwiper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;CardItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;native-base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we’re also going to import the vector icon library.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far all of our styles have been inline, but we’re going to break some of them out into a &lt;code class=&quot;highlighter-rouge&quot;&gt;StyleSheet&lt;/code&gt;. We have a couple of items in the stats, a name and the stats themselves. I’m going to style those.&lt;/p&gt;

&lt;p&gt;Add this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;playerNameText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;statText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bold&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;teams&quot;&gt;Teams&lt;/h2&gt;

&lt;p&gt;For a little bit of aesthetics, I’ve decided to associate a team logo with each team in our list. I’ve converted the selected team into an array of teams. After the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; declaration, I added the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;teams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Atlanta Braves&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;atl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;https://mk0teamcolorcodtgc6i.kinstacdn.com/wp-content/uploads/2017/05/atlanta_braves_logo_2018-768x312.png&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Detroit Tigers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;det&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;https://mk0teamcolorcodtgc6i.kinstacdn.com/wp-content/uploads/2014/05/tigers_logo.jpg&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Boston Red Sox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;https://mk0teamcolorcodtgc6i.kinstacdn.com/wp-content/uploads/2017/05/boston_red_sox_logo.png&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tampa Bay Rays&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;https://mk0teamcolorcodtgc6i.kinstacdn.com/wp-content/uploads/2014/05/rays_logo.jpg&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Seattle Mariners&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;https://mk0teamcolorcodtgc6i.kinstacdn.com/wp-content/uploads/2014/05/mariners_logo.jpg&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; is going to bind to this and update our state. When we iterate over the statistics, we’ll be able to put the team’s logo into the card.&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object, I’m changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;currentTeam&lt;/code&gt; from “det” to &lt;code class=&quot;highlighter-rouge&quot;&gt;this.teams[0]&lt;/code&gt;. This puts the first item in the teams array as the default selected item.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;currentTeam&lt;/code&gt; is now an object, we’ll need to change our get call to &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; to only send the “code” item of the object.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`cumulative_player_stats.json?team=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For some additional aesthetics, I’m going to assign an image to each player. There isn’t a quick and easy way to get a player’s image, so I’ve hardcoded an action shot I found and I’m going to hardcode it for now.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; call for the stats object now looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;battingAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BattingAvg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;https://www.gannett-cdn.com/-mm-/60c67b4da0efea761b6f18d2a7eb4c3e05ae4c7d/c=241-0-4017-2839&amp;amp;r=x404&amp;amp;c=534x401/local/-/media/2018/04/26/USATODAY/USATODAY/636603455387676668-AP-APTOPIX-Reds-Braves-Baseball-99453123.JPG&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;wiring-up-the-presentation&quot;&gt;Wiring up the presentation&lt;/h2&gt;

&lt;p&gt;Scroll down to the &lt;code class=&quot;highlighter-rouge&quot;&gt;teamSelectionChanged&lt;/code&gt; handler. As a reminder, this is the function that is called when the user selects a new team from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; component. In a moment, you’ll see we’re going to change the binding from a simple string to a member inside of the object, so we’re only going to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; in our &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; argument. Since we want our &lt;code class=&quot;highlighter-rouge&quot;&gt;currentTeam&lt;/code&gt; to actually be the entire object, we’ll use Javascript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; function to return the right object in the &lt;code class=&quot;highlighter-rouge&quot;&gt;team&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;teamSelectionChanged&lt;/code&gt; will now look like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;teamSelectionChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; should be a valid &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; will return when it finds the first match. Since our codes are unique, this will work perfectly.&lt;/p&gt;

&lt;h2 id=&quot;presentation-rendering&quot;&gt;Presentation Rendering&lt;/h2&gt;

&lt;p&gt;At long last, we’ve reached the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function. This is where everything is tied together.&lt;/p&gt;

&lt;p&gt;The first thing I want to do is generate my &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; items from the &lt;code class=&quot;highlighter-rouge&quot;&gt;teams&lt;/code&gt; array. Before the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;, I want to build a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker.Item&amp;gt;&lt;/code&gt;’s.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pickerItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll bind these later on down when we declare our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next set of big changes have to do with using the NativeBase components over the React Native components. By switching some of the layout components to NativeBase the components will play nicer together and map a lot better to the NativeBase examples. Although sometimes I do like to fall back on the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View /&amp;gt;&lt;/code&gt; component, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Container /&amp;gt;&lt;/code&gt; component in NativeBase is usually just as good or better. However, sometimes, it can create some unexpected layout quirks, particularly in flexbox scenarios.&lt;/p&gt;

&lt;p&gt;Since this is a massive chunk of code, I’m going to paste it all out there and then we’re going to go through each bit and explain what’s going on.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;alignContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;flex-start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;flex-start&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;selectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;onValueChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamSelectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pickerItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Picker&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DeckSwiper&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;renderItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;resizeMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
                  &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Left&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playerNameText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/CardItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardItem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cardBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
                &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;alignSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;flex-start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;flexDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;column&quot;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;Batting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;battingAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/CardItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CardItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Swipe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-arrow-round-forward&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/CardItem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Card&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Container&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;container&quot;&gt;Container&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Container /&amp;gt;&lt;/code&gt; houses our entire component. We’ve introduced some flexbox stylings. I want our container to take up all the space, I want the content aligned from the top down.&lt;/p&gt;

&lt;h2 id=&quot;picker&quot;&gt;Picker&lt;/h2&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; has been modified slightly. The &lt;code class=&quot;highlighter-rouge&quot;&gt;selectedValue&lt;/code&gt; now includes the &lt;code class=&quot;highlighter-rouge&quot;&gt;.code&lt;/code&gt; at the end since this is now an object. And remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;pickerItems&lt;/code&gt; variable we declared up top? Well, that gets injected just before our closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/Picker&amp;gt;&lt;/code&gt; tag. Now we’re ready to accept changes to our teams via the picker again, the meat of the presentation is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DeckSwiper /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;h2 id=&quot;nativebase-deckswiper&quot;&gt;NativeBase DeckSwiper&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DeckSwiper /&amp;gt;&lt;/code&gt; component is great for displaying a logical grouping of data that all has the same layout. In our case, we could have a whole lot of sports statistics for a player, but for simplicity sake, we’re only showing a few. But if this were the real world, we may have enough to fill a screen and then some. On the Score screen, we elected to have a scrollable list of scores, but for the stats, I’m going to show all of the stats for one player at a time.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DeckSwiper /&amp;gt;&lt;/code&gt; is merely a housing for the content. It facilitates the swiping and subsequent rendering and that’s it. For each player and the associated stats, we’re going to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Card&amp;gt;&lt;/code&gt; which is worthy of its own explanation.&lt;/p&gt;

&lt;h2 id=&quot;nativebase-card&quot;&gt;NativeBase Card&lt;/h2&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Card&amp;gt;&lt;/code&gt; is another content container, however, it provides us with some flexible options that make it a suitable choice for an array. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CardItem&amp;gt;&lt;/code&gt; is a child component of &lt;code class=&quot;highlighter-rouge&quot;&gt;Card&lt;/code&gt; and the two work much the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt;. We’re going to take advantage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem()&lt;/code&gt; function in &lt;code class=&quot;highlighter-rouge&quot;&gt;DeckSwiper&lt;/code&gt; and output a &lt;code class=&quot;highlighter-rouge&quot;&gt;Card&lt;/code&gt; and for each player that we receive back from our API call.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;CardItem&lt;/code&gt; is going to utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;Left&lt;/code&gt; layout. &lt;code class=&quot;highlighter-rouge&quot;&gt;Left&lt;/code&gt;, as you might guess, anchors the children inside of it to the left. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Body&amp;gt;&lt;/code&gt; would place all content between the &lt;code class=&quot;highlighter-rouge&quot;&gt;Left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Right&lt;/code&gt; components and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Right&lt;/code&gt; anchors the content to the right hand side of the screen.&lt;/p&gt;

&lt;p&gt;We’re anchoring our current team logo to the left.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resizeMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;contain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Left&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Body&amp;gt;&lt;/code&gt; is going to contain the player name.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playerNameText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is nothing we want to anchor to the right, so we’ll omit that component.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;cardBody&lt;/code&gt; will display items in a similar fashion, only this time our image will be the hardcoded image of the player and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Body&amp;gt;&lt;/code&gt; will contain the player’s statistics.&lt;/p&gt;

&lt;h3 id=&quot;renderitem&quot;&gt;renderItem()&lt;/h3&gt;

&lt;p&gt;One notable standout is the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem()&lt;/code&gt; function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;DeckSwiper&lt;/code&gt;. This is the heart of what ties the data to the presentation layer. We can take the data and template it any way we want to. &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem()&lt;/code&gt; takes an array and using ES6 fat arrow syntax, we return jsx for each item. You could literally embed any component(s) you want to render this data. Get comfortable with this way of doing things, it’s repeated a lot in various components.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;This was a pretty massive set of changes and a lot more polish was possible thanks to NativeBase. NativeBase has a pretty extensive collection of components and I highly recommend trying them out. The nice thing is that they keep to the React Native concepts very well, so what you’ve learned is transferrable and makes things much more discoverable.&lt;/p&gt;

&lt;p&gt;If you hung on to this article, well done! The next article will be a joyride, but NativeBase is making it easy.&lt;/p&gt;

&lt;h2 id=&quot;a-note-about-external-resources-http-vs-https&quot;&gt;A Note About External Resources (http: vs. https:)&lt;/h2&gt;

&lt;p&gt;A common stumbling block on images or videos or really anything loaded externally is that iOS (and mostly Android) require that the url be secure. Loading an image from http rather https will result in a frustrating “no load” where you don’t get an error, but you also don’t get your resource. If you think you have everything right, but nothing is showing, make sure you have https in the url.&lt;/p&gt;

&lt;h2 id=&quot;coming-attractions&quot;&gt;Coming Attractions&lt;/h2&gt;

&lt;p&gt;You might have noticed that there was a delay displaying the statistics whenever you switch teams. This can be really confusing to a user when the logo reflects one team, but stats are still reflecting the previous selection. In the next article, we’ll fix this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/b29f09a40258904a0d37975a52ac9c71442209f9&quot; target=&quot;_blank&quot;&gt;React Native Sports App Tutorial up to this point.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Sports Stats Screen All Posts</summary></entry><entry><title type="html">React Native Sports Stats Screen</title><link href="/react-native-blog/react-native-sports-stats-screen.html" rel="alternate" type="text/html" title="React Native Sports Stats Screen" /><published>2018-05-18T00:00:00-04:00</published><updated>2018-05-18T00:00:00-04:00</updated><id>/react-native-blog/react-native-sports-stats-screen</id><content type="html" xml:base="/react-native-blog/react-native-sports-stats-screen.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-add-navigation-tabs.html&quot;&gt;&amp;laquo; React Native Add Navigation Tabs&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-nativebase.html&quot;&gt;React Native Nativebase &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-sports-statistics&quot;&gt;Adding Sports Statistics&lt;/h1&gt;

&lt;p&gt;This next couple of posts are going to create our second screen that is a placeholder at the moment. We’re not going to learn a lot new as it pertains to React Native, but we’re setting ourselves up to have a little more fun with some third party user interface components. Consider this article a quick review as we stub out a way to display sports statistics. We’re essentially reviewing what we know and then we’re going to tie it all together with some prettiness. Lets get started …&lt;/p&gt;

&lt;h2 id=&quot;housekeeping-items&quot;&gt;Housekeeping Items&lt;/h2&gt;

&lt;p&gt;The first thing we’re going to do is rename &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen2.js&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;StatsScreen.js&lt;/code&gt;. Some fallout tasks to that is changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;createNavTabs.js&lt;/code&gt; to point to &lt;code class=&quot;highlighter-rouge&quot;&gt;StatsScreen&lt;/code&gt; now (instead of Screen2). We’ll also change the label on the tab from Screen2 to Stats.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sports-app.StatsScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; change the import statement for Screen2 to&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import StatsScreen from &quot;./src/screens/StatsScreen&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And change the &lt;code class=&quot;highlighter-rouge&quot;&gt;registerComponent()&lt;/code&gt; for Screen2 to&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sports-app.StatsScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StatsScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The remaining pieces of work involve creating a screen that will load our sports stats.&lt;/p&gt;

&lt;h2 id=&quot;sports-stats-screen---getting-data&quot;&gt;Sports Stats Screen - Getting Data&lt;/h2&gt;

&lt;p&gt;If you remember back to when we first starting loading data from MySportsFeed, we set up axios to pull using our authorization key. The great thing about axios is that we were able to tuck away this authorization header and the base URL that forms every request. This
allows us to make short work of getting additional data from MySportsFeed.&lt;/p&gt;

&lt;p&gt;The screenshot below shows where we’ll be retrieving the data from.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/my-sports-api-react-native.png&quot; alt=&quot;React Native MySportFeed API Stats&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sports-stats-screen---processing-data&quot;&gt;Sports Stats Screen - Processing Data&lt;/h2&gt;

&lt;p&gt;I’ll walk through each change to the file from top to bottom, so we’ll start with the imports.&lt;/p&gt;

&lt;p&gt;Open the newly renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;StatsScreen.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’re adding a Picker component which is a React Native component, just like a Text, View, etc. We’re also going to import our axios export.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../axios-sports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, change the class name from Screen2 to StatsScreen.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StatsScreen&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just like our other screen, we’re going to have a local state that holds information like the current team selected, their stats, if there was an error, etc. Just inside of the class, lets initialize our state.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;det&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;currentTeam&lt;/code&gt; is going to hold a selection from the Picker. This will be used when we load the stats. &lt;code class=&quot;highlighter-rouge&quot;&gt;stats&lt;/code&gt; will hold our loaded stats (if loading is successful), otherwise, &lt;code class=&quot;highlighter-rouge&quot;&gt;hadError&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;errorMessage&lt;/code&gt; will become important.&lt;/p&gt;

&lt;p&gt;We’re going to hook into the component lifecycle method &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; once again to load some initial stats.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now for the heart of the functionality, our stat loading function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;loadStats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`cumulative_player_stats.json?team=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cumulativeplayerstats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playerstatsentry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;battingAverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BattingAvg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Homeruns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MySportsFeed really puts stuff in there good and deep, but they’re very thorough, which is why we like them. After all of that, I’m just going to pluck out the player name, his batting average and number of homeruns. You’re welcome to add any stats you’d like. Once we’re extracted what we wanted, we’re going to put the stats into the state so that they can be rendered (this will done in the next article).&lt;/p&gt;

&lt;h2 id=&quot;loading-team-stats-dynamically&quot;&gt;Loading Team Stats Dynamically&lt;/h2&gt;

&lt;p&gt;Our last bit of fun for this article is to add support in the user interface to change the team based on user selection. We’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; component we added to our import earlier and a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker /&amp;gt;&lt;/code&gt; component exposes a &lt;code class=&quot;highlighter-rouge&quot;&gt;onValueChange&lt;/code&gt; event hook. We’ll subscribe to that with our own function which will update the state and reload the statistics based on the user’s selection. Our handler looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;teamSelectionChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s quick and easy, but it looks a little different than previous &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; calls because in this version, we utilize a callback that is passed in the second argument. This callback is called when the state has been updated. We could have just as easily added an argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;loadStats()&lt;/code&gt; but I wanted to keep the team synchronized and in one place.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-react-native-picker&quot;&gt;Adding a React Native Picker&lt;/h2&gt;

&lt;p&gt;Finally in our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, we’re going to change our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; to do a lot more than just return some dummy text. We’re going to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt; with some hard coded teams. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt; will also wire up our &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueChange&lt;/code&gt; event.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;selectedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onValueChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamSelectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tigers&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;det&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Braves&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;atl&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Red Sox&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bos&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Rays&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tam&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mariners&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sea&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Picker&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The React Native picker &lt;code class=&quot;highlighter-rouge&quot;&gt;onValueChange&lt;/code&gt; will pass two arguments. The selected value, which is what is in each &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Picker.Item&amp;gt; value&lt;/code&gt; tag and the display index. We don’t need the display index of item, but I thought I’d point it out anyway.&lt;/p&gt;

&lt;p&gt;We’re only passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;this.teamSelectionChanged()&lt;/code&gt; function. Since this is wired up, we should be able to see our stats. I’m going to fire up the React Native Debugger. If you haven’t heard of React Native Debugger, it’s a great tool that you really need to know about now. Stop everything and read the section &lt;a href=&quot;2018-04-20-react-native-state.md&quot;&gt;Analyzing State In the React Native Debugger&lt;/a&gt; where I give a quick overview of how to install and use React Native Debugger.&lt;/p&gt;

&lt;p&gt;And here we see our hometown Atlanta Braves stats in our state. Thankfully Ronald Acuna isn’t batting 0.000 this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-state-sports-stats.png&quot; alt=&quot;React Native State Sports Stats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It ain’t pretty, but we’ve done all of the heavy lifting necessary now to put a pretty face on this screen, which will happen in the next set of articles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/dd210644577f387af0513b1da31fdc7a7f62e8df&quot; target=&quot;_blank&quot;&gt;React Native Sports App Tutorial up to this point.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Add Navigation Tabs React Native Nativebase &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Add Navigation Tabs</title><link href="/react-native-blog/react-native-add-navigation-tabs.html" rel="alternate" type="text/html" title="React Native Add Navigation Tabs" /><published>2018-05-14T00:00:00-04:00</published><updated>2018-05-14T00:00:00-04:00</updated><id>/react-native-blog/react-native-add-navigation-tabs</id><content type="html" xml:base="/react-native-blog/react-native-add-navigation-tabs.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-navigation-android.html&quot;&gt;&amp;laquo; React Native Navigation Android&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-sports-stats-screen.html&quot;&gt;React Native Sports Stats Screen &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-navigation-tabs&quot;&gt;Adding Navigation Tabs&lt;/h1&gt;

&lt;p&gt;If you’ve made it this far, give yourself a pat on the back. Getting these native modules working is always trying. The good news is, the fun part is now. We get to add some simple tab based navigation to the app.&lt;/p&gt;

&lt;p&gt;We’re going to tie together the react-native-vector-icons and the react-native-navigation components in this post. To get started, lets create a new file in the project called &lt;code class=&quot;highlighter-rouge&quot;&gt;createNavTabs.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’re going to associate icons with the tabs, so we need to import the navigation and icon packages.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m going to pick some random icons, but feel free to look at the &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;link here to pick your own icons&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-icons-asynchronously&quot;&gt;Loading Icons Asynchronously&lt;/h2&gt;

&lt;p&gt;When we’re not specifying an icon in the markup, we’re going to load them using the &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageSource()&lt;/code&gt; function. &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageSource&lt;/code&gt; takes two parameters, the name and the size. For our purproses, we’ll load a 30x30 icon. Paste the following below your import statements.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-menu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startTabBasedApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sports-app.ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Scores&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sports-app.Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Screen 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re doing quite a lot in just a small space. First, we’ve kicked off an array of promises to load 2 icons from the vector icon library. When that’s completed, the success case will return an array of icons in the order that we requested them.&lt;/p&gt;

&lt;p&gt;The good stuff happens in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation.startTabBasedApp()&lt;/code&gt; which takes an object that contains an array of tabs and other configuration items. For now, we’ll keep it simple and create two tab items.&lt;/p&gt;

&lt;p&gt;To make this work, we’re going to do a bit of refactoring by putting our existing screen from &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; into its own screen. I’m going to organize this by creating a new &lt;code class=&quot;highlighter-rouge&quot;&gt;screens&lt;/code&gt; folder off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder (which is inline with our &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; folder).&lt;/p&gt;

&lt;p&gt;In there, I’m going to create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen.js&lt;/code&gt; and a placeholder for Screen 2 (which we haven’t developed yet) and for now we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen2.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I literally gutted &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; and put nearly all of it into &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen.js&lt;/code&gt;. I changed the name of the class from &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; is now going to look like this for starters.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScoreScreen&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/screens/ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/screens/Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/createNavTabs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This includes all of dependencies we need to load the tab navigation. From there, we hand off the screen display to the navigation library. So &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; becomes fairly dumb. It just provides the configuration tying screens to navigation and calls our &lt;code class=&quot;highlighter-rouge&quot;&gt;startTabs()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sports-app.ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScoreScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sports-app.Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing!&lt;/h2&gt;

&lt;p&gt;Since we moved the ScoreScreen into the &lt;code class=&quot;highlighter-rouge&quot;&gt;screens&lt;/code&gt; folder, we have to update the paths of our &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements. Those will change like so.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlatList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DatePicker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-datepicker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-root-toast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;moment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../axios-sports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScorecardItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../components/ScorecardItem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s really just axios and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ScorecardItem&lt;/code&gt; component imports that needed changing, but the entire import section is there for your copy and paste convenience.&lt;/p&gt;

&lt;h3 id=&quot;screen-2&quot;&gt;Screen 2&lt;/h3&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen2.js&lt;/code&gt;, we’ll just add some placeholder stuff for now.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets fire up the app and see what it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-navigation-screen1.png&quot; alt=&quot;React Native Navigation Screen 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then we press on the Screen 2 text at the bottom and we’ll see our second placeholder screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-navigation-screen2.png&quot; alt=&quot;React Native Navigation Screen 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’ve got it! In the next lesson we’ll add some functionality to the second screen.&lt;/p&gt;

&lt;p&gt;If you need some help, please check out this commit in github which contains our application up to this point.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/2f77bb8a2d0c953541299017a2c7a689545b1c9d&quot; target=&quot;_blank&quot;&gt;Sports App Repository up to this point.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Navigation Android React Native Sports Stats Screen &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Navigation Android</title><link href="/react-native-blog/react-native-navigation-android.html" rel="alternate" type="text/html" title="React Native Navigation Android" /><published>2018-05-09T00:00:00-04:00</published><updated>2018-05-09T00:00:00-04:00</updated><id>/react-native-blog/react-native-navigation-android</id><content type="html" xml:base="/react-native-blog/react-native-navigation-android.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-installing-navigation.html&quot;&gt;&amp;laquo; React Native Installing Navigation&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-add-navigation-tabs.html&quot;&gt;React Native Add Navigation Tabs &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-react-native-navigation-android&quot;&gt;Installing React Native Navigation (Android)&lt;/h1&gt;

&lt;p&gt;In our previous tutorial, we installed native navigation support in Xcode. Now we’re going to apply the same library to Android using Android Studio. Load up the project in Android Studio and lets get started. If you skipped the iOS tutorial, please make sure you’ve installed the react-native-navigation package using the command below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-navigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include ':react-native-navigation'
 project(':react-native-navigation').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-navigation/android/app/')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: you should already see our react-native-vector-icons referenced in this file. Add the navigation items from above below this.&lt;/p&gt;

&lt;p&gt;Now open &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; from the app level.&lt;/p&gt;

&lt;p&gt;Change the SDK and build tools version from 23 to 25.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    compileSdkVersion 25
    buildToolsVersion &quot;25.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then towards the bottom of the same file, add these lines to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; node. Once again, you should see our referencing the react-native-vector-icons and that’s how you know you’re in the right place.&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; node should now look like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies {
    compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])
    compile &quot;com.android.support:appcompat-v7:23.0.1&quot;
    compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules
    compile project(':react-native-vector-icons')
    compile &quot;com.facebook.react:react-native:+&quot;
    compile project(':react-native-navigation')
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we need to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt;. Our current file looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sportsapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.facebook.react.ReactActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMainComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sportsapp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It needs to be changed to look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sportsapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.facebook.react.ReactActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.reactnativenavigation.controllers.SplashActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SplashActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMainComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sportsapp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we need to update &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication.java&lt;/code&gt;. The first thing to add is to add this import and modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication&lt;/code&gt; class declaration like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.reactnativenavigation.NavigationApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavigationApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Somewhere in the class, add this method.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Make sure you are using BuildConfig from your own application&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the bottom of the class, add this method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAdditionalReactPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/d811fc05e5a5f3fb6ffd6087123ee6a6fe885a3b&quot; target=&quot;_blank&quot;&gt;This commit will have Android support, so if you need a little help or something to compare against, go here.&lt;/a&gt; Sometimes Android Studio can be
finicky.&lt;/p&gt;

&lt;p&gt;And that should be it.&lt;/p&gt;

&lt;p&gt;In the next article, we’ll add some basic tabs to the bottom of the app to switch between screens.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Installing Navigation React Native Add Navigation Tabs &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Installing Navigation</title><link href="/react-native-blog/react-native-installing-navigation.html" rel="alternate" type="text/html" title="React Native Installing Navigation" /><published>2018-05-07T00:00:00-04:00</published><updated>2018-05-07T00:00:00-04:00</updated><id>/react-native-blog/react-native-installing-navigation</id><content type="html" xml:base="/react-native-blog/react-native-installing-navigation.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-navigation-introduction.html&quot;&gt;&amp;laquo; React Native Navigation Introduction&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-navigation-android.html&quot;&gt;React Native Navigation Android &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-react-native-navigation-ios&quot;&gt;Installing React Native Navigation (iOS)&lt;/h1&gt;

&lt;p&gt;After installing the React Native Vector Icons, you’re probably aware that this isn’t always a smooth process, but once it’s done, it usually just works fine. So lets get started.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-navigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We’ll start with installation on iOS. Fire up Xcode and right click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt; node and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Files to sportsapp&lt;/code&gt;. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-navigation&lt;/code&gt; folder under our project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;./node_modules/react-native-navigation/ios/ReactNativeNavigation.xcodeproj&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next, select the top level node of the project and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;. Like we did with &lt;code class=&quot;highlighter-rouge&quot;&gt;libRNVectorIcons&lt;/code&gt;, add the react native navigation library as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-add-react-native-navigation.png&quot; alt=&quot;React Native Navigation Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt; section on top and then scroll to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../node_modules/react-native-navigation/ios&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-add-react-native-navigation-search-paths.png&quot; alt=&quot;React Native Navigation iOS Search Paths&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, in Xcode, open the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt; file and replace the contents with this.&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;AppDelegate.h&quot;
#import &amp;lt;React/RCTBundleURLProvider.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &quot;RCCManager.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;React/RCTRootView.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef DEBUG
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCTBundleURLProvider&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jsBundleURLForBundleRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;index&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fallbackResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;jsbundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIWindow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCCManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initBridgeWithBundleURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Product-&amp;gt;Build&lt;/code&gt; in Xcode and make sure your program still builds. If so, congratulations, you’re half way there. In the next tutorial we’re going to add the react-native-navigation package to Android Studio and then we’ll implement some basic navigation and some additional features to our program to take advantage of the ability to navigate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/f1ff1087ba089fa98d119262e11d4717d12c8576&quot; target=&quot;_blank&quot;&gt;This commit will have the iOS support, so if you need a little help or something to compare against, go here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Navigation Introduction React Native Navigation Android &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Navigation Introduction</title><link href="/react-native-blog/react-native-navigation-introduction.html" rel="alternate" type="text/html" title="React Native Navigation Introduction" /><published>2018-05-01T00:00:00-04:00</published><updated>2018-05-01T00:00:00-04:00</updated><id>/react-native-blog/react-native-navigation-introduction</id><content type="html" xml:base="/react-native-blog/react-native-navigation-introduction.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-vector-icons-android.html&quot;&gt;&amp;laquo; React Native Vector Icons Android&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-installing-navigation.html&quot;&gt;React Native Installing Navigation &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introducing-navigation-to-our-react-native-app&quot;&gt;Introducing Navigation to our React Native App&lt;/h1&gt;

&lt;p&gt;Navigation is a bit of a political subject at the moment. I believe the general consensus is that there are pitfalls and cons to whatever you choose. At the time of this writing, there are really 3 choices (several attempts at nav have been abandoned).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;react-native-navigation&lt;/li&gt;
  &lt;li&gt;react-navigation&lt;/li&gt;
  &lt;li&gt;react-native-navigation v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets start with react-navigation. It’s big attractions to me are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple to get installed. It’s Javascript based, so no monkeying around with Android Studio and/or Xcode to get started.&lt;/li&gt;
  &lt;li&gt;Community Supported. Commits seem to be frequent and as I’m writing this, there was a commit as recent as 3 days ago.&lt;/li&gt;
  &lt;li&gt;Platform specific components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Possible performance issues because it’s running on the Javascript thread. For our purposes now, this probably isn’t a big issue.&lt;/li&gt;
  &lt;li&gt;I’m not a fan of the docs and examples. Could use more screenshots, I found busted links, etc.&lt;/li&gt;
  &lt;li&gt;I seem to hit a lot of pitfalls that leave me frustrated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The folks at reactnavigation.org have even given their own pitch/anti-pitch as to why you should or shouldn’t use that library. &lt;a href=&quot;https://reactnavigation.org/docs/pitch.html&quot; target=&quot;_blank&quot;&gt;React navigation pitch/anti-pitch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;react-native-navigation&quot;&gt;react-native-navigation&lt;/h3&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native and highly performant&lt;/li&gt;
  &lt;li&gt;Seems to be fairly straightforward to get working.&lt;/li&gt;
  &lt;li&gt;Documentation is better, I found the samples concise and it got me started quick.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native, so the setup is a pain (as you’re probably well aware of after setting up the vector icons).&lt;/li&gt;
  &lt;li&gt;Also contains a number of bugs that leave me frustrated.&lt;/li&gt;
  &lt;li&gt;Maintained by a company. (wix)&lt;/li&gt;
  &lt;li&gt;Deep debugging has to be done in native environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react-native-navigation-v2&quot;&gt;react-native-navigation v2&lt;/h3&gt;

&lt;p&gt;I cannot speak to this, as I haven’t tried it. I wanted to point it out because the folks at wix are encouraging folks to use it. At this stage, it’s an alpha product and has been that way for some time and I don’t really have a compelling reason to switch to v2. I may play with it some day for fun, but for our purposes, I’m going to eliminate it from the list of consideration.&lt;/p&gt;

&lt;h2 id=&quot;my-choice-is-&quot;&gt;My choice is …&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*lPYG2cGAo7Qet0nd6_szPA.png&quot; alt=&quot;react-native-navigation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React Native Navigation.&lt;/p&gt;

&lt;p&gt;As mentioned in the cons, the setup is a pain, but no more painful than the vector icons. It’s one and done and the samples provided make up the setup time really quickly.&lt;/p&gt;

&lt;p&gt;With that said, I encourage anyone who comes across this today to re-evaluate the react native navigation situation each time you’re developing a new app or refactoring an existing app.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Vector Icons Android React Native Installing Navigation &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Vector Icons Android</title><link href="/react-native-blog/react-native-vector-icons-android.html" rel="alternate" type="text/html" title="React Native Vector Icons Android" /><published>2018-04-30T00:00:00-04:00</published><updated>2018-04-30T00:00:00-04:00</updated><id>/react-native-blog/react-native-vector-icons-android</id><content type="html" xml:base="/react-native-blog/react-native-vector-icons-android.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-vector-icons-ios.html&quot;&gt;&amp;laquo; React Native Vector Icons Ios&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-navigation-introduction.html&quot;&gt;React Native Navigation Introduction &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-libraries-for-android-studio&quot;&gt;Adding React Native Libraries for Android Studio&lt;/h1&gt;

&lt;p&gt;In our last article we focused on adding the react-native-vector-icons library to our iOS version of the application. This article will focus specifically on Android. If you missed it, you will need to install the &lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot;&gt;React Native Vector Icons&lt;/a&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-vector-icons&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-your-native-tools-set-up&quot;&gt;Getting Your Native Tools Set Up&lt;/h2&gt;

&lt;p&gt;Getting this part started was outlined in the &lt;a href=&quot;/react-native-blog/2018-03-08-react-native-environment-setup.html&quot;&gt;React Native Environment article&lt;/a&gt;. If you missed it, I suggest you read that before continuing here.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-android-studio&quot;&gt;Setting Up For Android Studio&lt;/h2&gt;

&lt;p&gt;We’re going to follow the instructions for the manual setup just like we did for iOS. Again, we’re only using Ionicons. There are two folders to be aware of. First, the react-native-vector-icons package exists in your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Locate that folder in Finder or Windows Explorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-folder.png&quot; alt=&quot;React Native Vector Icons Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder off of the project root. Note: if you don’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder here, you likely haven’t ejected and need to perform this step before continuning.&lt;/p&gt;

&lt;p&gt;Open Android Studio and click &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sports-app&lt;/code&gt; project and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt; button. If this is the first time you’ve run Android Studio, you may be prompted to upgrade some modules. Agree to these (unless you have reasons not to).&lt;/p&gt;

&lt;p&gt;We are building with Gradle, so open the &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; file in Android Studio and add the following lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project.ext.vectoricons = [
        iconFontNames: [ 'Ionicons.ttf' ]

apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Android, you have to start the emulator before you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start android&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Another note, it is common for me to get this ugly error after running &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start android&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* What went wrong:
A problem occurred configuring root project 'sportsapp'.
&amp;gt; Could not resolve all files for configuration ':classpath'.
   &amp;gt; Could not find com.android.tools.build:gradle:3.0.1.
     Searched in the following locations:
         https://jcenter.bintray.com/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.pom
         https://jcenter.bintray.com/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The solution is to open the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; at the project level (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt; in this case) and add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;google()&lt;/code&gt; underneath &lt;code class=&quot;highlighter-rouge&quot;&gt;buildscript&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing-vector-icon-library&quot;&gt;Testing Vector Icon Library&lt;/h2&gt;

&lt;p&gt;If you skipped the last tutorial because you wanted to focus on Android only, we performed two tests to make sure things worked. Even though the project builds, there are two quick things to test.&lt;/p&gt;

&lt;p&gt;First thing we need to do is import the Ionicon font. Towards the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; next to your other imports, add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Icon from &quot;react-native-vector-icons/Ionicons&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, I’m simply going to add a dummy icon to see if it displays. For a list of the names that can be used with &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;Ionicons, see this link&lt;/a&gt;. You can click any icon on the list and it will give you the display for each platform (iOS or Android).&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon&lt;/code&gt; component, all we need to do is specify a name property. For my purposes, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;md-contact&lt;/code&gt;, for material design since this is our Android version.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, just after the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; tag, I’m going to add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Icon name=&quot;md-contact&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can see icon, albeit tiny, but it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-android.png&quot; alt=&quot;React Native Vector Icons Android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to hook up dynamic loading support. This is particularly handy because you can make decisions at runtime regarding which icons to load. This is immediately useful because typically the Android icons will want the “material design” look (usually the icon names will be prefixed with ‘md-‘) and iOS has their own look (usually prefixed with ‘ios-‘).&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;android/settings.grade&lt;/code&gt; add these lines to the bottom of the file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include ':react-native-vector-icons'
project(':react-native-vector-icons').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-vector-icons/android')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back in your &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; which we edited previously, look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section and at the bottom of that section add:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile project(':react-native-vector-icons')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, in &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication.java&lt;/code&gt;, we’ll need to import the package. Where the other &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements are in the file, add this to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import com.oblador.vectoricons.VectorIconsPackage;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPackages()&lt;/code&gt; function. Add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;new VectorIconsPackage()&lt;/code&gt; so that your &lt;code class=&quot;highlighter-rouge&quot;&gt;getPackages()&lt;/code&gt; function looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Override
protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
  return Arrays.&amp;lt;ReactPackage&amp;gt;asList(
      new MainReactPackage(),
      new VectorIconsPackage()
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure this works, we’re going to call the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon.getImageSource()&lt;/code&gt;. This function returns a promise, just like our http get call. For now, we don’t care about the result. If the application runs without an error, the function is working.&lt;/p&gt;

&lt;p&gt;At the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, add this snippet.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaded icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the vector library is bound properly, this function will complete without a red screen of death. If you get a red screen, you missed a step or did something wrong. If you have your debugger running, you’ll see the “loaded icons” text output in the console log.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/315a450b36091b471d2f04ccf5ef1d856b74c092&quot; target=&quot;_blank&quot;&gt;This commit will have both iOS and Android support loaded, so if you need a little help or something to compare against, go here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Vector Icons Ios React Native Navigation Introduction &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Vector Icons Ios</title><link href="/react-native-blog/react-native-vector-icons-ios.html" rel="alternate" type="text/html" title="React Native Vector Icons Ios" /><published>2018-04-27T00:00:00-04:00</published><updated>2018-04-27T00:00:00-04:00</updated><id>/react-native-blog/react-native-vector-icons-ios</id><content type="html" xml:base="/react-native-blog/react-native-vector-icons-ios.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-toast.html&quot;&gt;&amp;laquo; React Native Toast&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-vector-icons-android.html&quot;&gt;React Native Vector Icons Android &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-libraries-for-ios-in-xcode&quot;&gt;Adding React Native Libraries for iOS in Xcode&lt;/h1&gt;

&lt;p&gt;Undoubtedly one of the most frustrating experiences is adding 3rd party native libraries. You’re going to get all kinds of weird error messages, build issues in both Android Studio and Xcode, but stick with it. I’ll offer some tips and tricks to force things to work again and provide some guidance around pitfalls.&lt;/p&gt;

&lt;p&gt;The goal of the next few articles is to demonstrate basic navigation features in an app. It’s typical for a mobile app to have more than one screen and normal for a mobile app to have several top level components that the user can jump to with one press.&lt;/p&gt;

&lt;p&gt;First things first, lets fix our app to remove the intentional error that forced the toast notification to pop up. Do this and verify that your app displays scores again.&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-vector-icons&quot;&gt;Adding react-native-vector-icons&lt;/h1&gt;

&lt;p&gt;This package is handy because it contains nicely polished icons that are typical for applications. They provide icons for both Android (material design) and iOS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot;&gt;React Native Vector Icons&lt;/a&gt; is the github home of this project. As usual, we’re going to use yarn add to begin adding support for this project. Unfortunately, that’s the easy part. We’ll also need to add support to both iOS and Android via the respective native project files. This will be tough the first few times you do it, but it gets easier.&lt;/p&gt;

&lt;p&gt;Lets get started.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-vector-icons&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we’re going to handle adding the library to each platform. If you only need one of the two platforms, feel free to skip.&lt;/p&gt;

&lt;h2 id=&quot;getting-your-native-tools-set-up&quot;&gt;Getting Your Native Tools Set Up&lt;/h2&gt;

&lt;p&gt;Getting this part started was outlined in the &lt;a href=&quot;/react-native-blog/2018-03-08-react-native-environment-setup.html&quot;&gt;React Native Environment article&lt;/a&gt;. If you missed it, I suggest you read that before continuing here.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-ios-xcode&quot;&gt;Setting Up For iOS (Xcode)&lt;/h2&gt;

&lt;p&gt;We’re going to follow the instructions for the manual setup. While there are a few icons to choose from, we’re only going to use Ionicons. There are two folders to be aware of. First, the react-native-vector-icons package exists in your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Locate that folder in Finder or Windows Explorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-folder.png&quot; alt=&quot;React Native Vector Icons Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; folder off of the project root. Note: if you don’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder here, you likely haven’t ejected and need to perform this step before continuning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-ios-project.png&quot; alt=&quot;React Native iOS Project File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Double click this to open Xcode with this project. Once open, we’re going to drag and drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ionicons.ttf&lt;/code&gt; file from the fonts folder that we just opened onto Xcode.&lt;/p&gt;

&lt;p&gt;Next, locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; file in your xcode project. Double click to open and at the bottom, right click and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Row&lt;/code&gt; and in the dropdown for the new row, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-ios-add-fonts.png&quot; alt=&quot;React Native iOS Add Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we want to link the vector icons binary in our iOS project. Back in your Finder or Explorer, go back to your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt; folder and locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;RNVectorIcons.xcodeproj&lt;/code&gt; file. Drag and drop this on to XCode under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt; node as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-ios-libraries.png&quot; alt=&quot;React Native iOS Add Font Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to &lt;code class=&quot;highlighter-rouge&quot;&gt;Link Binary With Libraries&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; section (click the very top node on the left in your project if you’re not seeing this). Click the + button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-ios-build-phases.png&quot; alt=&quot;React Native iOS Link Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, make sure the project builds within Xcode. (Yes, there will be a lot of warnings, you can ignore them).&lt;/p&gt;

&lt;h2 id=&quot;testing-vector-icon-library&quot;&gt;Testing Vector Icon Library&lt;/h2&gt;

&lt;p&gt;Even though the project builds, We still want to make sure the icon library is actually working. There are two quick things to test this. First thing we need to do is import the Ionicon font. Towards the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; next to your other imports, add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Icon from &quot;react-native-vector-icons/Ionicons&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, I’m simply going to add a dummy icon to see if it displays. For a list of the names that can be used with &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;Ionicons, see this link&lt;/a&gt;. You can click any icon on the list and it will give you the display for each platform (iOS or Android).&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon&lt;/code&gt; component, all we need to do is specify a name property. For my purposes, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;contact-ios&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, just after the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; tag, I’m going to add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Icon name=&quot;ios-contact&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: you will likely need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn run ios&lt;/code&gt; again to get the icon library linked into the simulator.&lt;/p&gt;

&lt;p&gt;Once you rerun the app in the simulator, your icon should appear on the top left as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-test.png&quot; alt=&quot;React Native Vector Icons Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s ever so small, but you can see a tiny contact icon in the corner. No need to tweak it, we’re going to remove it. This is just a simple test to make sure things are wired up.&lt;/p&gt;

&lt;p&gt;There is one more test. When we linked the library into the project, this gives us support for loading icons at run time. This is particularly handy because you can make decisions at runtime regarding which icons to load. This is immediately useful because typically the Android icons will want the “material design” look (usually the icon names will be prefixed with ‘md-‘) and iOS has their own look (usually prefixed with ‘ios-‘).&lt;/p&gt;

&lt;p&gt;To make sure this works, we’re going to call the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon.getImageSource()&lt;/code&gt;. This function returns a promise, just like our http get call. For now, we don’t care about the result. If the application runs without an error, the function is working.&lt;/p&gt;

&lt;p&gt;At the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, add this snippet.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ios-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaded icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the vector library is bound properly, this function will complete without a red screen of death. If you get a red screen, you missed a step or did something wrong.&lt;/p&gt;

&lt;h2 id=&quot;common-linking-problems&quot;&gt;Common Linking Problems&lt;/h2&gt;

&lt;p&gt;One common mistake is to have the wrong target selected in Xcode. If we go back to the project in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; section, the Targets listed on the left side will typically have 4 entries. In our case, they should be named &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsappTest&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp-tvOS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp-tvOSTests&lt;/code&gt;. It’s important that you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt; target selected.&lt;/p&gt;

&lt;p&gt;For a lot more detail on linking libraries with React Native and XCode &lt;a href=&quot;http://facebook.github.io/react-native/docs/linking-libraries-ios.html#content&quot; target=&quot;_blank&quot;&gt;see this link in the React Native documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’re half way there. In the next article, we’re going to link up to Android Studio for our Android version.&lt;/p&gt;

&lt;p&gt;If you’re stuck, you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/404ca332aca5aa98f7fbdc1c8972a316ba0bc38f&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Toast React Native Vector Icons Android &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Toast</title><link href="/react-native-blog/react-native-toast.html" rel="alternate" type="text/html" title="React Native Toast" /><published>2018-04-26T00:00:00-04:00</published><updated>2018-04-26T00:00:00-04:00</updated><id>/react-native-blog/react-native-toast</id><content type="html" xml:base="/react-native-blog/react-native-toast.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-date-picker.html&quot;&gt;&amp;laquo; React Native Date Picker&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-vector-icons-ios.html&quot;&gt;React Native Vector Icons Ios &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;error-reporting-using-toast-component&quot;&gt;Error Reporting Using Toast Component&lt;/h1&gt;

&lt;p&gt;In this article, we’re going to throw in some quick error reporting to the user. This will occur when the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; block is executed due to one or more errors. Since we already have a vast majority of the building blocks in place, this should be fairly straightforward.&lt;/p&gt;

&lt;p&gt;The first thing to note is that React Native does not have a toast component. In fact, out of the box react native components are a bit sparse, so we’ll find ourselves going to third parties more often than a reactjs app.&lt;/p&gt;

&lt;p&gt;I’ve tried a few toast components, with mixed success. I’ve settled on one that’s simple enough for our purposes. It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-root-toast&lt;/code&gt;. To get started, install the component:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-root-toast&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Strangely, there is a dependency that isn’t installed by default called &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt;. Redux is an extremely popular library that you have probably stumbled across. If not, don’t worry about it for now, it’s nothing more than a depedency for us at this stage. We’ll go into redux at a later time as it is more of an advanced topic. Back to the task at hand, install redux.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add redux&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;wiring-up-your-toast-component&quot;&gt;Wiring Up Your Toast Component&lt;/h3&gt;

&lt;p&gt;We have everything we need to simply wire this up. First, import the toast component. At the top of App.js probably below where you imported the DatePicker component, add:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Toast from &quot;react-native-root-toast&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then at the top of the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, we’ll conditionally create the toast component if there is an error set in our state.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Toast&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then at nearly the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement in the render function, we’ll add our toast variable just before we close off the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/View&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could inline this if we wanted to, but I think my render function is getting big enough.&lt;/p&gt;

&lt;p&gt;Finally, lets create an error condition in the request so that it will fail and display the toast component. I’ve added a bogus 1 to the beginning of the query string in the url.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`scoreboard.json?1fordate=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-toast-notification.png&quot; alt=&quot;react-native-toast-notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you’re stuck you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/4de613eab6d94aee74f3ea9b8f407decb1586c4e&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Date Picker React Native Vector Icons Ios &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Date Picker</title><link href="/react-native-blog/react-native-date-picker.html" rel="alternate" type="text/html" title="React Native Date Picker" /><published>2018-04-25T00:00:00-04:00</published><updated>2018-04-25T00:00:00-04:00</updated><id>/react-native-blog/react-native-date-picker</id><content type="html" xml:base="/react-native-blog/react-native-date-picker.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-props-wiring.html&quot;&gt;&amp;laquo; React Native Props Wiring&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-toast.html&quot;&gt;React Native Toast &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;responding-to-user-feedback---react-native-events&quot;&gt;Responding to User Feedback - React Native Events&lt;/h1&gt;

&lt;p&gt;After that bit of clean up, I’d like to allow the user to pick dates for scores they’d like to see. We’re going to go through installing a third party component package and show how to handle user events.&lt;/p&gt;

&lt;p&gt;Here is the goal of this section.&lt;/p&gt;

&lt;video width=&quot;640&quot; height=&quot;480&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/react-native-blog/assets/videos/react-native-date-picker.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;React Native provides separate components for date picking in iOS and date picking on Android which is not ideal. For this, I’m electing to download a package that handles both platforms with a single control.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-datepicker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to get this component installed.&lt;/p&gt;

&lt;p&gt;To begin using this component, we’ll need to &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; it. At the upper portion where the other import statements live add a new line.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import DatePicker from &quot;react-native-datepicker&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We’re going to hold the selected date in our component’s state, so in your state initializer, add the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date: &quot;20170411&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which is what our current hard coded date value is.&lt;/p&gt;

&lt;p&gt;Now we’re going to add the DatePicker to the top of our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, just above the FlatList. I’ve taken their example and tweaked the props to suit my purposes.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DatePicker&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select date&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-DD&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-01&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;maxDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-11-01&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;confirmBtnText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Confirm&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cancelBtnText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onDateChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateChangedHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also note that I had to omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;customStyles&lt;/code&gt; property from this tutorial because github pages didn’t like it. You can copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DatePicker&amp;gt;&lt;/code&gt; props in full from &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/blob/5779968579d84006d6fb48148c1e0e076c1528a3/App.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The vast majority of these props seem pretty self explanatory, but I do want to touch on the event that we’re handling, since this is a new concept. &lt;code class=&quot;highlighter-rouge&quot;&gt;onDateChange&lt;/code&gt; is a property that takes a function. The function is called when the user confirms the picked date or time in the UI. There is some shorthand going on here. The fat arrow says to pass the function as opposed to executing it immediately. The &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; declaration is an argument passed in by the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; and we’re in turn passing this information on to a function we named &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we get to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; function, I wanted to point out another refactor that has been done. I’ve moved the entire contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; into a separate function named &lt;code class=&quot;highlighter-rouge&quot;&gt;loadScores&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;loadScores&lt;/code&gt; takes no arguments because we’re going to get what we need from the state. Create a function like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;loadScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and take everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; and put it in here. After that’s done and your &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; function is empty, add this single line to &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loadScores();&lt;/code&gt;. So now we’re still going to have some scores loaded when the app starts, but now the function can be called from other events as well.&lt;/p&gt;

&lt;p&gt;Oh, one other thing, make sure you change the http get call from the hard coded value to the date that’s in our state.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.get(`scoreboard.json?fordate=${this.state.date}`)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This takes us back to our &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; function that we’re calling when the selection on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; changes, but have yet to write. I want to accomplish two things. I need to update the state with the new date and I want the scores to reload reflecting the date selected.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; formats the date in a visually appealing manner, however, our API requires the date in &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYYMMDD&lt;/code&gt;, so we’re going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;moment.js&lt;/code&gt; to take the visually appealing version and make it suitable for the sports API.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Moment.js&lt;/code&gt; likely already installed, but if it isn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add moment&lt;/code&gt; will get that straight. We’ll want to import it at the top of our file as well. Where you added the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; import, add &lt;code class=&quot;highlighter-rouge&quot;&gt;import moment from &quot;moment&quot;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we can get to writing our &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; event handler function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;dateChangedHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYYMMDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s as simple as I explained earlier. We’re setting the state and using moment to format the date appropriately and then calling &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loadScores()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As usual, if you’re stuck you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/blob/5779968579d84006d6fb48148c1e0e076c1528a3/App.js&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Compare my code against yours to see where we’re different.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Props Wiring React Native Toast &amp;raquo; All Posts</summary></entry></feed>