<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="/react-native-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/react-native-blog/" rel="alternate" type="text/html" /><updated>2018-05-14T16:39:30-04:00</updated><id>/react-native-blog/</id><title type="html">React Native Sports App Tutorial</title><subtitle>Building a small sports score React Native application from the ground up.</subtitle><entry><title type="html">React Native Add Navigation Tabs</title><link href="/react-native-blog/react-native-add-navigation-tabs.html" rel="alternate" type="text/html" title="React Native Add Navigation Tabs" /><published>2018-05-14T00:00:00-04:00</published><updated>2018-05-14T00:00:00-04:00</updated><id>/react-native-blog/react-native-add-navigation-tabs</id><content type="html" xml:base="/react-native-blog/react-native-add-navigation-tabs.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-navigation-android.html&quot;&gt;&amp;laquo; React Native Navigation Android&lt;/a&gt;
   
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-navigation-tabs&quot;&gt;Adding Navigation Tabs&lt;/h1&gt;

&lt;p&gt;If you’ve made it this far, give yourself a pat on the back. Getting these native modules working is always trying. The good news is, the fun part is now. We get to add some simple tab based navigation to the app.&lt;/p&gt;

&lt;p&gt;We’re going to tie together the react-native-vector-icons and the react-native-navigation components in this post. To get started, lets create a new file in the project called &lt;code class=&quot;highlighter-rouge&quot;&gt;createNavTabs.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’re going to associate icons with the tabs, so we need to import the navigation and icon packages.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m going to pick some random icons, but feel free to look at the &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;link here to pick your own icons&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-icons-asynchronously&quot;&gt;Loading Icons Asynchronously&lt;/h2&gt;

&lt;p&gt;When we’re not specifying an icon in the markup, we’re going to load them using the &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageSource()&lt;/code&gt; function. &lt;code class=&quot;highlighter-rouge&quot;&gt;getImageSource&lt;/code&gt; takes two parameters, the name and the size. For our purproses, we’ll load a 30x30 icon. Paste the following below your import statements.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-menu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startTabBasedApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sports-app.ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Scores&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sports-app.Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Screen 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re doing quite a lot in just a small space. First, we’ve kicked off an array of promises to load 2 icons from the vector icon library. When that’s completed, the success case will return an array of icons in the order that we requested them.&lt;/p&gt;

&lt;p&gt;The good stuff happens in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation.startTabBasedApp()&lt;/code&gt; which takes an object that contains an array of tabs and other configuration items. For now, we’ll keep it simple and create two tab items.&lt;/p&gt;

&lt;p&gt;To make this work, we’re going to do a bit of refactoring by putting our existing screen from &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; into its own screen. I’m going to organize this by creating a new &lt;code class=&quot;highlighter-rouge&quot;&gt;screens&lt;/code&gt; folder off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder (which is inline with our &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; folder).&lt;/p&gt;

&lt;p&gt;In there, I’m going to create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen.js&lt;/code&gt; and a placeholder for Screen 2 (which we haven’t developed yet) and for now we’ll call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen2.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I literally gutted &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; and put nearly all of it into &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen.js&lt;/code&gt;. I changed the name of the class from &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ScoreScreen&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; is now going to look like this for starters.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScoreScreen&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/screens/ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/screens/Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/createNavTabs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This includes all of dependencies we need to load the tab navigation. From there, we hand off the screen display to the navigation library. So &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; becomes fairly dumb. It just provides the configuration tying screens to navigation and calls our &lt;code class=&quot;highlighter-rouge&quot;&gt;startTabs()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sports-app.ScoreScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScoreScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sports-app.Screen2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;startTabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing!&lt;/h2&gt;

&lt;p&gt;Since we moved the ScoreScreen into the &lt;code class=&quot;highlighter-rouge&quot;&gt;screens&lt;/code&gt; folder, we have to update the paths of our &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements. Those will change like so.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlatList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DatePicker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-datepicker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-root-toast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;moment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../axios-sports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native-vector-icons/Ionicons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScorecardItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../components/ScorecardItem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s really just axios and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ScorecardItem&lt;/code&gt; component imports that needed changing, but the entire import section is there for your copy and paste convenience.&lt;/p&gt;

&lt;h3 id=&quot;screen-2&quot;&gt;Screen 2&lt;/h3&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen2.js&lt;/code&gt;, we’ll just add some placeholder stuff for now.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets fire up the app and see what it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-navigation-screen1.png&quot; alt=&quot;React Native Navigation Screen 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then we press on the Screen 2 text at the bottom and we’ll see our second placeholder screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-navigation-screen2.png&quot; alt=&quot;React Native Navigation Screen 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’ve got it! In the next lesson we’ll add some functionality to the second screen.&lt;/p&gt;

&lt;p&gt;If you need some help, please check out this commit in github which contains our application up to this point.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/2f77bb8a2d0c953541299017a2c7a689545b1c9d&quot; target=&quot;_blank&quot;&gt;Sports App Repository up to this point.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Navigation Android All Posts</summary></entry><entry><title type="html">React Native Navigation Android</title><link href="/react-native-blog/react-native-navigation-android.html" rel="alternate" type="text/html" title="React Native Navigation Android" /><published>2018-05-09T00:00:00-04:00</published><updated>2018-05-09T00:00:00-04:00</updated><id>/react-native-blog/react-native-navigation-android</id><content type="html" xml:base="/react-native-blog/react-native-navigation-android.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-installing-navigation.html&quot;&gt;&amp;laquo; React Native Installing Navigation&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-add-navigation-tabs.html&quot;&gt;React Native Add Navigation Tabs &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-react-native-navigation-android&quot;&gt;Installing React Native Navigation (Android)&lt;/h1&gt;

&lt;p&gt;In our previous tutorial, we installed native navigation support in Xcode. Now we’re going to apply the same library to Android using Android Studio. Load up the project in Android Studio and lets get started. If you skipped the iOS tutorial, please make sure you’ve installed the react-native-navigation package using the command below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-navigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include ':react-native-navigation'
 project(':react-native-navigation').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-navigation/android/app/')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: you should already see our react-native-vector-icons referenced in this file. Add the navigation items from above below this.&lt;/p&gt;

&lt;p&gt;Now open &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; from the app level.&lt;/p&gt;

&lt;p&gt;Change the SDK and build tools version from 23 to 25.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    compileSdkVersion 25
    buildToolsVersion &quot;25.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then towards the bottom of the same file, add these lines to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; node. Once again, you should see our referencing the react-native-vector-icons and that’s how you know you’re in the right place.&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; node should now look like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies {
    compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])
    compile &quot;com.android.support:appcompat-v7:23.0.1&quot;
    compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules
    compile project(':react-native-vector-icons')
    compile &quot;com.facebook.react:react-native:+&quot;
    compile project(':react-native-navigation')
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we need to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt;. Our current file looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sportsapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.facebook.react.ReactActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMainComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sportsapp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It needs to be changed to look like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sportsapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.facebook.react.ReactActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.reactnativenavigation.controllers.SplashActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SplashActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMainComponentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sportsapp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we need to update &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication.java&lt;/code&gt;. The first thing to add is to add this import and modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication&lt;/code&gt; class declaration like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.reactnativenavigation.NavigationApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavigationApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Somewhere in the class, add this method.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Make sure you are using BuildConfig from your own application&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the bottom of the class, add this method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReactPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createAdditionalReactPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/d811fc05e5a5f3fb6ffd6087123ee6a6fe885a3b&quot; target=&quot;_blank&quot;&gt;This commit will have Android support, so if you need a little help or something to compare against, go here.&lt;/a&gt; Sometimes Android Studio can be
finicky.&lt;/p&gt;

&lt;p&gt;And that should be it.&lt;/p&gt;

&lt;p&gt;In the next article, we’ll add some basic tabs to the bottom of the app to switch between screens.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Installing Navigation React Native Add Navigation Tabs &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Installing Navigation</title><link href="/react-native-blog/react-native-installing-navigation.html" rel="alternate" type="text/html" title="React Native Installing Navigation" /><published>2018-05-07T00:00:00-04:00</published><updated>2018-05-07T00:00:00-04:00</updated><id>/react-native-blog/react-native-installing-navigation</id><content type="html" xml:base="/react-native-blog/react-native-installing-navigation.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-navigation-introduction.html&quot;&gt;&amp;laquo; React Native Navigation Introduction&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-navigation-android.html&quot;&gt;React Native Navigation Android &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;installing-react-native-navigation-ios&quot;&gt;Installing React Native Navigation (iOS)&lt;/h1&gt;

&lt;p&gt;After installing the React Native Vector Icons, you’re probably aware that this isn’t always a smooth process, but once it’s done, it usually just works fine. So lets get started.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-navigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We’ll start with installation on iOS. Fire up Xcode and right click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt; node and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Files to sportsapp&lt;/code&gt;. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-navigation&lt;/code&gt; folder under our project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;./node_modules/react-native-navigation/ios/ReactNativeNavigation.xcodeproj&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next, select the top level node of the project and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;. Like we did with &lt;code class=&quot;highlighter-rouge&quot;&gt;libRNVectorIcons&lt;/code&gt;, add the react native navigation library as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-add-react-native-navigation.png&quot; alt=&quot;React Native Navigation Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt; section on top and then scroll to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../node_modules/react-native-navigation/ios&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/ios-add-react-native-navigation-search-paths.png&quot; alt=&quot;React Native Navigation iOS Search Paths&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, in Xcode, open the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt; file and replace the contents with this.&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;AppDelegate.h&quot;
#import &amp;lt;React/RCTBundleURLProvider.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &quot;RCCManager.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;React/RCTRootView.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef DEBUG
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCTBundleURLProvider&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jsBundleURLForBundleRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;index&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fallbackResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;jsbundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIWindow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RCCManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initBridgeWithBundleURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Product-&amp;gt;Build&lt;/code&gt; in Xcode and make sure your program still builds. If so, congratulations, you’re half way there. In the next tutorial we’re going to add the react-native-navigation package to Android Studio and then we’ll implement some basic navigation and some additional features to our program to take advantage of the ability to navigate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/f1ff1087ba089fa98d119262e11d4717d12c8576&quot; target=&quot;_blank&quot;&gt;This commit will have the iOS support, so if you need a little help or something to compare against, go here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Navigation Introduction React Native Navigation Android &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Navigation Introduction</title><link href="/react-native-blog/react-native-navigation-introduction.html" rel="alternate" type="text/html" title="React Native Navigation Introduction" /><published>2018-05-01T00:00:00-04:00</published><updated>2018-05-01T00:00:00-04:00</updated><id>/react-native-blog/react-native-navigation-introduction</id><content type="html" xml:base="/react-native-blog/react-native-navigation-introduction.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-vector-icons-android.html&quot;&gt;&amp;laquo; React Native Vector Icons Android&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-installing-navigation.html&quot;&gt;React Native Installing Navigation &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;introducing-navigation-to-our-react-native-app&quot;&gt;Introducing Navigation to our React Native App&lt;/h1&gt;

&lt;p&gt;Navigation is a bit of a political subject at the moment. I believe the general consensus is that there are pitfalls and cons to whatever you choose. At the time of this writing, there are really 3 choices (several attempts at nav have been abandoned).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;react-native-navigation&lt;/li&gt;
  &lt;li&gt;react-navigation&lt;/li&gt;
  &lt;li&gt;react-native-navigation v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets start with react-navigation. It’s big attractions to me are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple to get installed. It’s Javascript based, so no monkeying around with Android Studio and/or Xcode to get started.&lt;/li&gt;
  &lt;li&gt;Community Supported. Commits seem to be frequent and as I’m writing this, there was a commit as recent as 3 days ago.&lt;/li&gt;
  &lt;li&gt;Platform specific components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Possible performance issues because it’s running on the Javascript thread. For our purposes now, this probably isn’t a big issue.&lt;/li&gt;
  &lt;li&gt;I’m not a fan of the docs and examples. Could use more screenshots, I found busted links, etc.&lt;/li&gt;
  &lt;li&gt;I seem to hit a lot of pitfalls that leave me frustrated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The folks at reactnavigation.org have even given their own pitch/anti-pitch as to why you should or shouldn’t use that library. &lt;a href=&quot;https://reactnavigation.org/docs/pitch.html&quot; target=&quot;_blank&quot;&gt;React navigation pitch/anti-pitch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;react-native-navigation&quot;&gt;react-native-navigation&lt;/h3&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native and highly performant&lt;/li&gt;
  &lt;li&gt;Seems to be fairly straightforward to get working.&lt;/li&gt;
  &lt;li&gt;Documentation is better, I found the samples concise and it got me started quick.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native, so the setup is a pain (as you’re probably well aware of after setting up the vector icons).&lt;/li&gt;
  &lt;li&gt;Also contains a number of bugs that leave me frustrated.&lt;/li&gt;
  &lt;li&gt;Maintained by a company. (wix)&lt;/li&gt;
  &lt;li&gt;Deep debugging has to be done in native environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react-native-navigation-v2&quot;&gt;react-native-navigation v2&lt;/h3&gt;

&lt;p&gt;I cannot speak to this, as I haven’t tried it. I wanted to point it out because the folks at wix are encouraging folks to use it. At this stage, it’s an alpha product and has been that way for some time and I don’t really have a compelling reason to switch to v2. I may play with it some day for fun, but for our purposes, I’m going to eliminate it from the list of consideration.&lt;/p&gt;

&lt;h2 id=&quot;my-choice-is-&quot;&gt;My choice is …&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*lPYG2cGAo7Qet0nd6_szPA.png&quot; alt=&quot;react-native-navigation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;React Native Navigation.&lt;/p&gt;

&lt;p&gt;As mentioned in the cons, the setup is a pain, but no more painful than the vector icons. It’s one and done and the samples provided make up the setup time really quickly.&lt;/p&gt;

&lt;p&gt;With that said, I encourage anyone who comes across this today to re-evaluate the react native navigation situation each time you’re developing a new app or refactoring an existing app.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Vector Icons Android React Native Installing Navigation &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Vector Icons Android</title><link href="/react-native-blog/react-native-vector-icons-android.html" rel="alternate" type="text/html" title="React Native Vector Icons Android" /><published>2018-04-30T00:00:00-04:00</published><updated>2018-04-30T00:00:00-04:00</updated><id>/react-native-blog/react-native-vector-icons-android</id><content type="html" xml:base="/react-native-blog/react-native-vector-icons-android.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-vector-icons-ios.html&quot;&gt;&amp;laquo; React Native Vector Icons Ios&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-navigation-introduction.html&quot;&gt;React Native Navigation Introduction &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-libraries-for-android-studio&quot;&gt;Adding React Native Libraries for Android Studio&lt;/h1&gt;

&lt;p&gt;In our last article we focused on adding the react-native-vector-icons library to our iOS version of the application. This article will focus specifically on Android. If you missed it, you will need to install the &lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot;&gt;React Native Vector Icons&lt;/a&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-vector-icons&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-your-native-tools-set-up&quot;&gt;Getting Your Native Tools Set Up&lt;/h2&gt;

&lt;p&gt;Getting this part started was outlined in the &lt;a href=&quot;/react-native-blog/2018-03-08-react-native-environment-setup.html&quot;&gt;React Native Environment article&lt;/a&gt;. If you missed it, I suggest you read that before continuing here.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-android-studio&quot;&gt;Setting Up For Android Studio&lt;/h2&gt;

&lt;p&gt;We’re going to follow the instructions for the manual setup just like we did for iOS. Again, we’re only using Ionicons. There are two folders to be aware of. First, the react-native-vector-icons package exists in your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Locate that folder in Finder or Windows Explorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-folder.png&quot; alt=&quot;React Native Vector Icons Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder off of the project root. Note: if you don’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder here, you likely haven’t ejected and need to perform this step before continuning.&lt;/p&gt;

&lt;p&gt;Open Android Studio and click &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sports-app&lt;/code&gt; project and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt; button. If this is the first time you’ve run Android Studio, you may be prompted to upgrade some modules. Agree to these (unless you have reasons not to).&lt;/p&gt;

&lt;p&gt;We are building with Gradle, so open the &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; file in Android Studio and add the following lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project.ext.vectoricons = [
        iconFontNames: [ 'Ionicons.ttf' ]

apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Android, you have to start the emulator before you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start android&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Another note, it is common for me to get this ugly error after running &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn start android&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* What went wrong:
A problem occurred configuring root project 'sportsapp'.
&amp;gt; Could not resolve all files for configuration ':classpath'.
   &amp;gt; Could not find com.android.tools.build:gradle:3.0.1.
     Searched in the following locations:
         https://jcenter.bintray.com/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.pom
         https://jcenter.bintray.com/com/android/tools/build/gradle/3.0.1/gradle-3.0.1.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The solution is to open the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; at the project level (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt; in this case) and add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;google()&lt;/code&gt; underneath &lt;code class=&quot;highlighter-rouge&quot;&gt;buildscript&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing-vector-icon-library&quot;&gt;Testing Vector Icon Library&lt;/h2&gt;

&lt;p&gt;If you skipped the last tutorial because you wanted to focus on Android only, we performed two tests to make sure things worked. Even though the project builds, there are two quick things to test.&lt;/p&gt;

&lt;p&gt;First thing we need to do is import the Ionicon font. Towards the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; next to your other imports, add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Icon from &quot;react-native-vector-icons/Ionicons&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, I’m simply going to add a dummy icon to see if it displays. For a list of the names that can be used with &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;Ionicons, see this link&lt;/a&gt;. You can click any icon on the list and it will give you the display for each platform (iOS or Android).&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon&lt;/code&gt; component, all we need to do is specify a name property. For my purposes, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;md-contact&lt;/code&gt;, for material design since this is our Android version.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, just after the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; tag, I’m going to add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Icon name=&quot;md-contact&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can see icon, albeit tiny, but it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-android.png&quot; alt=&quot;React Native Vector Icons Android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to hook up dynamic loading support. This is particularly handy because you can make decisions at runtime regarding which icons to load. This is immediately useful because typically the Android icons will want the “material design” look (usually the icon names will be prefixed with ‘md-‘) and iOS has their own look (usually prefixed with ‘ios-‘).&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;android/settings.grade&lt;/code&gt; add these lines to the bottom of the file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include ':react-native-vector-icons'
project(':react-native-vector-icons').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-vector-icons/android')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Back in your &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; which we edited previously, look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section and at the bottom of that section add:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile project(':react-native-vector-icons')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, in &lt;code class=&quot;highlighter-rouge&quot;&gt;MainApplication.java&lt;/code&gt;, we’ll need to import the package. Where the other &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements are in the file, add this to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import com.oblador.vectoricons.VectorIconsPackage;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Look for the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPackages()&lt;/code&gt; function. Add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;new VectorIconsPackage()&lt;/code&gt; so that your &lt;code class=&quot;highlighter-rouge&quot;&gt;getPackages()&lt;/code&gt; function looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Override
protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
  return Arrays.&amp;lt;ReactPackage&amp;gt;asList(
      new MainReactPackage(),
      new VectorIconsPackage()
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure this works, we’re going to call the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon.getImageSource()&lt;/code&gt;. This function returns a promise, just like our http get call. For now, we don’t care about the result. If the application runs without an error, the function is working.&lt;/p&gt;

&lt;p&gt;At the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, add this snippet.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;md-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaded icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the vector library is bound properly, this function will complete without a red screen of death. If you get a red screen, you missed a step or did something wrong. If you have your debugger running, you’ll see the “loaded icons” text output in the console log.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/315a450b36091b471d2f04ccf5ef1d856b74c092&quot; target=&quot;_blank&quot;&gt;This commit will have both iOS and Android support loaded, so if you need a little help or something to compare against, go here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Vector Icons Ios React Native Navigation Introduction &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Vector Icons Ios</title><link href="/react-native-blog/react-native-vector-icons-ios.html" rel="alternate" type="text/html" title="React Native Vector Icons Ios" /><published>2018-04-27T00:00:00-04:00</published><updated>2018-04-27T00:00:00-04:00</updated><id>/react-native-blog/react-native-vector-icons-ios</id><content type="html" xml:base="/react-native-blog/react-native-vector-icons-ios.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-toast.html&quot;&gt;&amp;laquo; React Native Toast&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-vector-icons-android.html&quot;&gt;React Native Vector Icons Android &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-libraries-for-ios-in-xcode&quot;&gt;Adding React Native Libraries for iOS in Xcode&lt;/h1&gt;

&lt;p&gt;Undoubtedly one of the most frustrating experiences is adding 3rd party native libraries. You’re going to get all kinds of weird error messages, build issues in both Android Studio and Xcode, but stick with it. I’ll offer some tips and tricks to force things to work again and provide some guidance around pitfalls.&lt;/p&gt;

&lt;p&gt;The goal of the next few articles is to demonstrate basic navigation features in an app. It’s typical for a mobile app to have more than one screen and normal for a mobile app to have several top level components that the user can jump to with one press.&lt;/p&gt;

&lt;p&gt;First things first, lets fix our app to remove the intentional error that forced the toast notification to pop up. Do this and verify that your app displays scores again.&lt;/p&gt;

&lt;h1 id=&quot;adding-react-native-vector-icons&quot;&gt;Adding react-native-vector-icons&lt;/h1&gt;

&lt;p&gt;This package is handy because it contains nicely polished icons that are typical for applications. They provide icons for both Android (material design) and iOS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oblador/react-native-vector-icons&quot;&gt;React Native Vector Icons&lt;/a&gt; is the github home of this project. As usual, we’re going to use yarn add to begin adding support for this project. Unfortunately, that’s the easy part. We’ll also need to add support to both iOS and Android via the respective native project files. This will be tough the first few times you do it, but it gets easier.&lt;/p&gt;

&lt;p&gt;Lets get started.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-vector-icons&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we’re going to handle adding the library to each platform. If you only need one of the two platforms, feel free to skip.&lt;/p&gt;

&lt;h2 id=&quot;getting-your-native-tools-set-up&quot;&gt;Getting Your Native Tools Set Up&lt;/h2&gt;

&lt;p&gt;Getting this part started was outlined in the &lt;a href=&quot;/react-native-blog/2018-03-08-react-native-environment-setup.html&quot;&gt;React Native Environment article&lt;/a&gt;. If you missed it, I suggest you read that before continuing here.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-ios-xcode&quot;&gt;Setting Up For iOS (Xcode)&lt;/h2&gt;

&lt;p&gt;We’re going to follow the instructions for the manual setup. While there are a few icons to choose from, we’re only going to use Ionicons. There are two folders to be aware of. First, the react-native-vector-icons package exists in your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder. Locate that folder in Finder or Windows Explorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-folder.png&quot; alt=&quot;React Native Vector Icons Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; folder off of the project root. Note: if you don’t have an &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; folder here, you likely haven’t ejected and need to perform this step before continuning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-ios-project.png&quot; alt=&quot;React Native iOS Project File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Double click this to open Xcode with this project. Once open, we’re going to drag and drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ionicons.ttf&lt;/code&gt; file from the fonts folder that we just opened onto Xcode.&lt;/p&gt;

&lt;p&gt;Next, locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; file in your xcode project. Double click to open and at the bottom, right click and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Row&lt;/code&gt; and in the dropdown for the new row, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-ios-add-fonts.png&quot; alt=&quot;React Native iOS Add Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we want to link the vector icons binary in our iOS project. Back in your Finder or Explorer, go back to your &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt; folder and locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;RNVectorIcons.xcodeproj&lt;/code&gt; file. Drag and drop this on to XCode under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt; node as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-ios-libraries.png&quot; alt=&quot;React Native iOS Add Font Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to &lt;code class=&quot;highlighter-rouge&quot;&gt;Link Binary With Libraries&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; section (click the very top node on the left in your project if you’re not seeing this). Click the + button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-ios-build-phases.png&quot; alt=&quot;React Native iOS Link Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, make sure the project builds within Xcode. (Yes, there will be a lot of warnings, you can ignore them).&lt;/p&gt;

&lt;h2 id=&quot;testing-vector-icon-library&quot;&gt;Testing Vector Icon Library&lt;/h2&gt;

&lt;p&gt;Even though the project builds, We still want to make sure the icon library is actually working. There are two quick things to test this. First thing we need to do is import the Ionicon font. Towards the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; next to your other imports, add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Icon from &quot;react-native-vector-icons/Ionicons&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, I’m simply going to add a dummy icon to see if it displays. For a list of the names that can be used with &lt;a href=&quot;https://ionicframework.com/docs/ionicons/&quot; target=&quot;_blank&quot;&gt;Ionicons, see this link&lt;/a&gt;. You can click any icon on the list and it will give you the display for each platform (iOS or Android).&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon&lt;/code&gt; component, all we need to do is specify a name property. For my purposes, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;contact-ios&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, just after the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; tag, I’m going to add this line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Icon name=&quot;ios-contact&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: you will likely need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn run ios&lt;/code&gt; again to get the icon library linked into the simulator.&lt;/p&gt;

&lt;p&gt;Once you rerun the app in the simulator, your icon should appear on the top left as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-vector-icons-test.png&quot; alt=&quot;React Native Vector Icons Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s ever so small, but you can see a tiny contact icon in the corner. No need to tweak it, we’re going to remove it. This is just a simple test to make sure things are wired up.&lt;/p&gt;

&lt;p&gt;There is one more test. When we linked the library into the project, this gives us support for loading icons at run time. This is particularly handy because you can make decisions at runtime regarding which icons to load. This is immediately useful because typically the Android icons will want the “material design” look (usually the icon names will be prefixed with ‘md-‘) and iOS has their own look (usually prefixed with ‘ios-‘).&lt;/p&gt;

&lt;p&gt;To make sure this works, we’re going to call the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon.getImageSource()&lt;/code&gt;. This function returns a promise, just like our http get call. For now, we don’t care about the result. If the application runs without an error, the function is working.&lt;/p&gt;

&lt;p&gt;At the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, add this snippet.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ios-home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaded icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the vector library is bound properly, this function will complete without a red screen of death. If you get a red screen, you missed a step or did something wrong.&lt;/p&gt;

&lt;h2 id=&quot;common-linking-problems&quot;&gt;Common Linking Problems&lt;/h2&gt;

&lt;p&gt;One common mistake is to have the wrong target selected in Xcode. If we go back to the project in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; section, the Targets listed on the left side will typically have 4 entries. In our case, they should be named &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsappTest&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp-tvOS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp-tvOSTests&lt;/code&gt;. It’s important that you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;sportsapp&lt;/code&gt; target selected.&lt;/p&gt;

&lt;p&gt;For a lot more detail on linking libraries with React Native and XCode &lt;a href=&quot;http://facebook.github.io/react-native/docs/linking-libraries-ios.html#content&quot; target=&quot;_blank&quot;&gt;see this link in the React Native documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’re half way there. In the next article, we’re going to link up to Android Studio for our Android version.&lt;/p&gt;

&lt;p&gt;If you’re stuck, you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/404ca332aca5aa98f7fbdc1c8972a316ba0bc38f&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Toast React Native Vector Icons Android &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Toast</title><link href="/react-native-blog/react-native-toast.html" rel="alternate" type="text/html" title="React Native Toast" /><published>2018-04-26T00:00:00-04:00</published><updated>2018-04-26T00:00:00-04:00</updated><id>/react-native-blog/react-native-toast</id><content type="html" xml:base="/react-native-blog/react-native-toast.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-date-picker.html&quot;&gt;&amp;laquo; React Native Date Picker&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-vector-icons-ios.html&quot;&gt;React Native Vector Icons Ios &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;error-reporting-using-toast-component&quot;&gt;Error Reporting Using Toast Component&lt;/h1&gt;

&lt;p&gt;In this article, we’re going to throw in some quick error reporting to the user. This will occur when the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; block is executed due to one or more errors. Since we already have a vast majority of the building blocks in place, this should be fairly straightforward.&lt;/p&gt;

&lt;p&gt;The first thing to note is that React Native does not have a toast component. In fact, out of the box react native components are a bit sparse, so we’ll find ourselves going to third parties more often than a reactjs app.&lt;/p&gt;

&lt;p&gt;I’ve tried a few toast components, with mixed success. I’ve settled on one that’s simple enough for our purposes. It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-root-toast&lt;/code&gt;. To get started, install the component:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-root-toast&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Strangely, there is a dependency that isn’t installed by default called &lt;code class=&quot;highlighter-rouge&quot;&gt;redux&lt;/code&gt;. Redux is an extremely popular library that you have probably stumbled across. If not, don’t worry about it for now, it’s nothing more than a depedency for us at this stage. We’ll go into redux at a later time as it is more of an advanced topic. Back to the task at hand, install redux.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add redux&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;wiring-up-your-toast-component&quot;&gt;Wiring Up Your Toast Component&lt;/h3&gt;

&lt;p&gt;We have everything we need to simply wire this up. First, import the toast component. At the top of App.js probably below where you imported the DatePicker component, add:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import Toast from &quot;react-native-root-toast&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then at the top of the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, we’ll conditionally create the toast component if there is an error set in our state.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hadError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Toast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Toast&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then at nearly the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement in the render function, we’ll add our toast variable just before we close off the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/View&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could inline this if we wanted to, but I think my render function is getting big enough.&lt;/p&gt;

&lt;p&gt;Finally, lets create an error condition in the request so that it will fail and display the toast component. I’ve added a bogus 1 to the beginning of the query string in the url.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`scoreboard.json?1fordate=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-toast-notification.png&quot; alt=&quot;react-native-toast-notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you’re stuck you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/4de613eab6d94aee74f3ea9b8f407decb1586c4e&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Date Picker React Native Vector Icons Ios &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Date Picker</title><link href="/react-native-blog/react-native-date-picker.html" rel="alternate" type="text/html" title="React Native Date Picker" /><published>2018-04-25T00:00:00-04:00</published><updated>2018-04-25T00:00:00-04:00</updated><id>/react-native-blog/react-native-date-picker</id><content type="html" xml:base="/react-native-blog/react-native-date-picker.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-props-wiring.html&quot;&gt;&amp;laquo; React Native Props Wiring&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-toast.html&quot;&gt;React Native Toast &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;responding-to-user-feedback---react-native-events&quot;&gt;Responding to User Feedback - React Native Events&lt;/h1&gt;

&lt;p&gt;After that bit of clean up, I’d like to allow the user to pick dates for scores they’d like to see. We’re going to go through installing a third party component package and show how to handle user events.&lt;/p&gt;

&lt;p&gt;Here is the goal of this section.&lt;/p&gt;

&lt;video width=&quot;640&quot; height=&quot;480&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/react-native-blog/assets/videos/react-native-date-picker.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;React Native provides separate components for date picking in iOS and date picking on Android which is not ideal. For this, I’m electing to download a package that handles both platforms with a single control.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add react-native-datepicker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to get this component installed.&lt;/p&gt;

&lt;p&gt;To begin using this component, we’ll need to &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; it. At the upper portion where the other import statements live add a new line.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import DatePicker from &quot;react-native-datepicker&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We’re going to hold the selected date in our component’s state, so in your state initializer, add the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date: &quot;20170411&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which is what our current hard coded date value is.&lt;/p&gt;

&lt;p&gt;Now we’re going to add the DatePicker to the top of our &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, just above the FlatList. I’ve taken their example and tweaked the props to suit my purposes.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DatePicker&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select date&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-DD&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016-05-01&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;maxDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2017-11-01&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;confirmBtnText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Confirm&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;cancelBtnText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onDateChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dateChangedHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also note that I had to omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;customStyles&lt;/code&gt; property from this tutorial because github pages didn’t like it. You can copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DatePicker&amp;gt;&lt;/code&gt; props in full from &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/blob/5779968579d84006d6fb48148c1e0e076c1528a3/App.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The vast majority of these props seem pretty self explanatory, but I do want to touch on the event that we’re handling, since this is a new concept. &lt;code class=&quot;highlighter-rouge&quot;&gt;onDateChange&lt;/code&gt; is a property that takes a function. The function is called when the user confirms the picked date or time in the UI. There is some shorthand going on here. The fat arrow says to pass the function as opposed to executing it immediately. The &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; declaration is an argument passed in by the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; and we’re in turn passing this information on to a function we named &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we get to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; function, I wanted to point out another refactor that has been done. I’ve moved the entire contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; into a separate function named &lt;code class=&quot;highlighter-rouge&quot;&gt;loadScores&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;loadScores&lt;/code&gt; takes no arguments because we’re going to get what we need from the state. Create a function like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;loadScores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and take everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; and put it in here. After that’s done and your &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; function is empty, add this single line to &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loadScores();&lt;/code&gt;. So now we’re still going to have some scores loaded when the app starts, but now the function can be called from other events as well.&lt;/p&gt;

&lt;p&gt;Oh, one other thing, make sure you change the http get call from the hard coded value to the date that’s in our state.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.get(`scoreboard.json?fordate=${this.state.date}`)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This takes us back to our &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; function that we’re calling when the selection on the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; changes, but have yet to write. I want to accomplish two things. I need to update the state with the new date and I want the scores to reload reflecting the date selected.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; formats the date in a visually appealing manner, however, our API requires the date in &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYYMMDD&lt;/code&gt;, so we’re going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;moment.js&lt;/code&gt; to take the visually appealing version and make it suitable for the sports API.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Moment.js&lt;/code&gt; likely already installed, but if it isn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add moment&lt;/code&gt; will get that straight. We’ll want to import it at the top of our file as well. Where you added the &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePicker&lt;/code&gt; import, add &lt;code class=&quot;highlighter-rouge&quot;&gt;import moment from &quot;moment&quot;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we can get to writing our &lt;code class=&quot;highlighter-rouge&quot;&gt;dateChangedHandler&lt;/code&gt; event handler function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;dateChangedHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYYMMDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadScores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s as simple as I explained earlier. We’re setting the state and using moment to format the date appropriately and then calling &lt;code class=&quot;highlighter-rouge&quot;&gt;this.loadScores()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As usual, if you’re stuck you can find my commit for this &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/blob/5779968579d84006d6fb48148c1e0e076c1528a3/App.js&quot; target=&quot;_blank&quot;&gt;react native tutorial
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Compare my code against yours to see where we’re different.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Props Wiring React Native Toast &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Props Wiring</title><link href="/react-native-blog/react-native-props-wiring.html" rel="alternate" type="text/html" title="React Native Props Wiring" /><published>2018-04-24T00:00:00-04:00</published><updated>2018-04-24T00:00:00-04:00</updated><id>/react-native-blog/react-native-props-wiring</id><content type="html" xml:base="/react-native-blog/react-native-props-wiring.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-unique-key.html&quot;&gt;&amp;laquo; React Native Unique Key&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-date-picker.html&quot;&gt;React Native Date Picker &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;wiring-up-data-via-props&quot;&gt;Wiring up Data via Props&lt;/h1&gt;

&lt;p&gt;We have written a lot of boilerplate for sure, but hopefully you can see the flexibility and power in this.&lt;/p&gt;

&lt;p&gt;Now is the time for us to take the remote data and apply it to our component. &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html&quot; target=&quot;_blank&quot;&gt;React props&lt;/a&gt; are a handy way to pass data from parent to child. To go the other way requires a completely different technique using what is called a store. Redux is the package commonly used to handle this scenario. Redux is a huge subject and is out of scope for now.&lt;/p&gt;

&lt;p&gt;If you get stuck, &lt;a href=&quot;https://github.com/bbuchanan/react-native-sports-app/tree/9019a38813f7e8cd7c7edc31944c6e43fab49440&quot; target=&quot;_blank&quot;&gt;the commit up until this point can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;props-are-dynamic&quot;&gt;Props Are Dynamic&lt;/h3&gt;

&lt;p&gt;Like Javascript itself, props are a “nod and a handshake” between parent and child components. It takes a tool lke Typescript to enforce some typing. We’ll do some Typescript basics later on. For now, we’re just going to take the data we’ve received and render it in our ScorecardItem component.&lt;/p&gt;

&lt;p&gt;The first thing we’re going to do is modify the ScorecardItem component to render these props. All of the hard coded values in this component are going to be changed to render props.&lt;/p&gt;

&lt;p&gt;We are a stateful component, so props are accessed via &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; just like we did with &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; in the last article. I’m going to keep the prop names similar to what I already have defined in my &lt;code class=&quot;highlighter-rouge&quot;&gt;scores&lt;/code&gt; object in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;. My &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function now looks like this.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardItemContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scoreContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The component is ready to accept these props, now it’s time to deliver them from the parent component. Recall that we already have the data we need loaded into the state. We want to now iterate over the array of scores and create a ScorecardItem for each score.&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;If you’re not familiar with &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;, it’s function available on a Javascript array that iterates over every element and provides a new array. If you’re a C# developer, think of &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; as roughly equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;Select()&lt;/code&gt; in Linq. For our purposes, we’re going to transform this array from data to a component with props.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScorecardItem&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scoreItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a lot happening for a single statement. This first thing we’re checking is for &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. If the scores haven’t been loaded yet, don’t iterate, but rather assign &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; to the scoreItems variable. If we’re not null, we’re going to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; which will iterate over every score. Each element in the array will be assigned to a variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;score&lt;/code&gt; which is the name immediately before the fat arrow. We assign each score element to our props for the ScorecardItem component.&lt;/p&gt;

&lt;p&gt;The last thing we need to do is actually output the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;scoreItems&lt;/code&gt; variable. Since we’re producing proper jsx, we can simply output the value as is, but it has to wrapped in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; tag as shown in the return statement.&lt;/p&gt;

&lt;h3 id=&quot;drumroll-please-&quot;&gt;Drumroll please …&lt;/h3&gt;

&lt;p&gt;The output looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-scorecard-output.png&quot; alt=&quot;react-native-scorecard-output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well that’s kind of ugly, isn’t it? In the next article we’ll go about making this a little more aesthetically pleasing. We’ll also address the warning that was produced at the bottom.&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native Unique Key React Native Date Picker &amp;raquo; All Posts</summary></entry><entry><title type="html">React Native Unique Key</title><link href="/react-native-blog/react-native-unique-key.html" rel="alternate" type="text/html" title="React Native Unique Key" /><published>2018-04-23T00:00:00-04:00</published><updated>2018-04-23T00:00:00-04:00</updated><id>/react-native-blog/react-native-unique-key</id><content type="html" xml:base="/react-native-blog/react-native-unique-key.html">&lt;div class=&quot;PageNavigation&quot;&gt;
  
  &lt;a class=&quot;prev&quot; href=&quot;/react-native-blog/react-native-state.html&quot;&gt;&amp;laquo; React Native State&lt;/a&gt;
   
  &lt;a class=&quot;next&quot; href=&quot;/react-native-blog/react-native-props-wiring.html&quot;&gt;React Native Props Wiring &amp;raquo;&lt;/a&gt;
  
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/react-native-blog/posts.html&quot;&gt;All Posts&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;sports-app-cleanup&quot;&gt;Sports App Cleanup&lt;/h1&gt;

&lt;p&gt;In the previous article, our React Native app finally got to a point where we could load data from a remote source, put that data into our component’s state, iterate over each javascript array item using the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function and finally pass the relevant portion of each element to our child component via React props.&lt;/p&gt;

&lt;p&gt;After all of that, we were left with annoying warning, ‘Warning: Each child in an array or iterator should have a unique “key” prop.’ and a less than polished scorecard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-scorecard-output.png&quot; alt=&quot;react-native-scorecard-output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The goal of this article is to get rid of the warning and make the scorecard look just a little bit better.&lt;/p&gt;

&lt;h3 id=&quot;unique-key&quot;&gt;Unique “key”&lt;/h3&gt;

&lt;p&gt;Most of the time when dealing with remote data, you’ll receive some sort of unique identifier. Fortunately for us, there seems to be an ID given for each game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-sports-game-output.png&quot; alt=&quot;react-native-sports-game-output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re going to pluck that ID and add that element to our scores array.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scoreboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now in the &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; function call in the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; function, we assign our &lt;code class=&quot;highlighter-rouge&quot;&gt;gameId&lt;/code&gt; to a special property called &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scoreItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScorecardItem&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you save this file, you should notice that the warning has disappeared.&lt;/p&gt;

&lt;h3 id=&quot;making-it-prettier&quot;&gt;Making it prettier&lt;/h3&gt;

&lt;p&gt;A designer I am not, but I can at least make this symmetrical so we don’t have different sized scorecards. There are a couple of ways to go about this. The first method is to explore the &lt;a href=&quot;https://facebook.github.io/react-native/docs/text.html#numberoflines&quot; target=&quot;_blank&quot;&gt;numberOfLines&lt;/a&gt; prop on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; component. By specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfLines&lt;/code&gt; we’re telling React Native to truncate text with an ellipsis should the text get too long.&lt;/p&gt;

&lt;p&gt;Since my team names seem to be the main culprit, I’m going to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfLines&lt;/code&gt; prop to both the home team and the away team like this.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberOfLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the same to the home team.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberOfLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;teamName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I’m going to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;cardItemContainer&lt;/code&gt; style which wraps the outermost portion of the component and explicitly set the height and width.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cardItemContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;borderRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;borderColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;borderWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alignItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-scorecard-fixed-output.png&quot; alt=&quot;react-native-scorecard-fixed-output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the text truncation is working and now my scorecards are symmetrical but I’ve introduced two more problems. First, my opinion is that truncating the team name isn’t very useful. This name is needed in its entirety. For that, I’m going to remove the truncation and make the card even wider to accommodate the long team names. I’ll set the width of the card to 150 and call it a day.&lt;/p&gt;

&lt;p&gt;Which leads us to our second problem. If you’re playing with this on the simulator, you’ll notice that your scores are being clipped at the bottom and that there is no way to scroll down to see them.&lt;/p&gt;

&lt;h2 id=&quot;react-native-list-views&quot;&gt;React Native List Views&lt;/h2&gt;

&lt;p&gt;We have two choices for scrollable lists. The FlatList and SectionList. The FlatList component does not try and do anything to the data other than add scrolling and it’s a performant scroll (as opposed to the ScrollView component). The SectionList component, the name implies, adds sectioning to the FlatList. A SectionList would be useful for something like a contact list. Usually contact lists are sorted alphabetically and each letter is represented by a section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/react-native-blog/assets/images/react-native-sectionlist-component.png&quot; alt=&quot;react-native-sectionlist-component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our purposes, the FlatList will do. The FlatList requires a datasource, which effectively moves our previous &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; work directly into the FlatList &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Our render now looks like this.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlatList&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;keyExtractor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;renderItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScorecardItem&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awayScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeTeam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;homeScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We move the scores null check into the container itself. If the scores are not null, we render a FlatList. We specify the scores from our state in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; property. Our previous map logic is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem&lt;/code&gt; property. One thing to note, the name of the argument must be called &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt;. If you want to get the index of the item, you could change the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem&lt;/code&gt; function signature to look like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renderItem={(item, index) =&amp;gt; }&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-different-way-to-do-keys&quot;&gt;A different way to do keys&lt;/h3&gt;

&lt;p&gt;As with our previous list rendering where we specified a key, we must do the same or risk the dreaded ‘VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor.’.&lt;/p&gt;

&lt;p&gt;This is done a little differently for FlatList. Either you have a field named ‘id’, which we don’t, or you tell React Native where to find the id via a function. We can do this inline.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keyExtractor={item =&amp;gt; item.gameId}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to map our game id as the key.&lt;/p&gt;

&lt;p&gt;Take a look at our now scrollable list.&lt;/p&gt;

&lt;video width=&quot;640&quot; height=&quot;480&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/react-native-blog/assets/videos/react-native-flatlist.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;We have now introduced another small issue. The list is not tiled as it was previously. This is due to the fact that the FlatList component is now our container. A little nuance here, the FlatList doesn’t want the &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; property set, but rather something called &lt;code class=&quot;highlighter-rouge&quot;&gt;contentContainerStyle&lt;/code&gt;. Here we’ll set the style previously set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;View&amp;gt;&lt;/code&gt; like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentContainerStyle={styles.container}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After saving this however, you’ll get a warning that states, &lt;code class=&quot;highlighter-rouge&quot;&gt;flexWrap:&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt; is not supported with the &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualizedList&lt;/code&gt; components. Consider using &lt;code class=&quot;highlighter-rouge&quot;&gt;numColumns&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;FlatList&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;The warning is fairly clear and we know on this particular display in portrait mode that this will fit cleanly in two columns, however, this isn’t very device friendly. Smaller or larger screen or if someone flips to landscape mode, we have a problem.&lt;/p&gt;

&lt;p&gt;For now, we’ll hard code &lt;code class=&quot;highlighter-rouge&quot;&gt;numColumns&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;FlatList&lt;/code&gt; to 2, remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;flexWrap&lt;/code&gt; style from &lt;code class=&quot;highlighter-rouge&quot;&gt;conatiner&lt;/code&gt; and change &lt;code class=&quot;highlighter-rouge&quot;&gt;flexDirection&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the future, we’ll go into how to make device orientation and screen size decisions so that this behaves in a responsive way.&lt;/p&gt;

&lt;h3 id=&quot;parting-notes&quot;&gt;Parting Notes&lt;/h3&gt;

&lt;p&gt;As you can see from this clean up, it isn’t uncommon to play whack-a-mole with React Native sometimes. Fixing a problem, particularly a visual problem, can create more problems.&lt;/p&gt;

&lt;p&gt;If your output isn’t matching mine, please pull this commit from my repository and compare your code to mine.&lt;/p&gt;

&lt;p&gt;https://github.com/bbuchanan/react-native-sports-app/tree/3e29a52dca8717b0b0038b962c3fe836f8e62d4e&lt;/p&gt;

&lt;h1&gt; Need a Full Stack React Developer?&lt;/h1&gt;

&lt;p&gt;I’m your guy! I’ve been a contract developer for over 14 years and can help you or your company on your project. The best
way to contact me is via our company page.
&lt;a href=&quot;https://www.yyesoftware.com&quot; target=&quot;_blank&quot;&gt;Yye Software&lt;/a&gt; is an application development company based in the Atlanta metro area with offices in Kennesaw.&lt;/p&gt;</content><author><name></name></author><summary type="html">&amp;laquo; React Native State React Native Props Wiring &amp;raquo; All Posts</summary></entry></feed>